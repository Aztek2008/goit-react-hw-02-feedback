{"version":3,"sources":["components/FeedbackControls/FeedbackControls.jsx","components/Statistics/Statistics.jsx","components/App/App.jsx","index.js"],"names":["FeedbackControls","onAddVote","className","name","type","onClick","e","target","toLowerCase","Statistics","statistic","totalVotes","positiveCount","good","neutral","bad","App","state","addVote","setState","countTotalFeedback","Object","values","reduce","a","b","countPositiveFeedbackPercentage","Math","floor","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAGe,SAASA,EAAT,GAA0C,IAAdC,EAAa,EAAbA,UACzC,OACE,yBAAKC,UAAU,uBACb,4BACEC,KAAK,OACLC,KAAK,SACLC,QAAS,SAACC,GACRL,EAAUK,EAAEC,OAAOJ,KAAKK,iBAJ5B,QAUA,4BACEL,KAAK,UACLC,KAAK,SACLC,QAAS,SAACC,GACRL,EAAUK,EAAEC,OAAOJ,KAAKK,iBAJ5B,WAUA,4BACEL,KAAK,MACLC,KAAK,SACLC,QAAS,SAACC,GACRL,EAAUK,EAAEC,OAAOJ,KAAKK,iBAJ5B,Q,MCvBS,SAASC,EAAT,GAA+D,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,cAC1D,OACE,yBAAKV,UAAU,sBACb,oCAAUQ,EAAUG,MACpB,uCAAaH,EAAUI,SACvB,mCAASJ,EAAUK,KACnB,+CAAqBJ,GACrB,wCAAcC,I,UCiCLI,E,4MArCbC,MAAQ,CACNJ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPG,QAAU,SAACZ,GACT,EAAKa,SAAL,eACGb,EAAI,EAAKW,MAAMX,GAAK,K,EAIzBc,mBAAqB,kBAAMC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,M,EAE1EC,gCAAkC,WAChC,OACE,EAAKT,MAAMJ,KAAO,GAClBc,KAAKC,MAAO,EAAKX,MAAMJ,KAAO,EAAKO,qBAAwB,KAAO,K,uDAKpE,OACE,yBAAKlB,UAAU,sBACb,qDACA,kBAAC,EAAD,CAAkBD,UAAW4B,KAAKX,UAClC,0CACA,kBAAC,EAAD,CACER,UAAWmB,KAAKZ,MAChBN,WAAYkB,KAAKT,qBACjBR,cAAeiB,KAAKH,yC,GA/BZI,a,MCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8f6614a5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FeedbackControls.css\";\n\nexport default function FeedbackControls({ onAddVote }) {\n  return (\n    <div className=\"FeedbackUI-controls\">\n      <button\n        name=\"Good\"\n        type=\"button\"\n        onClick={(e) => {\n          onAddVote(e.target.name.toLowerCase());\n        }}\n      >\n        Good\n      </button>\n\n      <button\n        name=\"Neutral\"\n        type=\"button\"\n        onClick={(e) => {\n          onAddVote(e.target.name.toLowerCase());\n        }}\n      >\n        Neutral\n      </button>\n\n      <button\n        name=\"Bad\"\n        type=\"button\"\n        onClick={(e) => {\n          onAddVote(e.target.name.toLowerCase());\n        }}\n      >\n        Bad\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Statistics.css\";\n\nexport default function Statistics({ statistic, totalVotes, positiveCount }) {\n  return (\n    <div className=\"Statistics-section\">\n      <p>Good: {statistic.good}</p>\n      <p>Neutral: {statistic.neutral}</p>\n      <p>Bad: {statistic.bad}</p>\n      <p>Total feedbacks: {totalVotes}</p>\n      <p>Positive: {positiveCount}</p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport FeedbackControls from \"../FeedbackControls/FeedbackControls\";\nimport Statistics from \"../Statistics/Statistics\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addVote = (e) => {\n    this.setState({\n      [e]: this.state[e] + 1,\n    });\n  };\n\n  countTotalFeedback = () => Object.values(this.state).reduce((a, b) => a + b);\n\n  countPositiveFeedbackPercentage = () => {\n    return (\n      this.state.good > 0 &&\n      Math.floor((this.state.good / this.countTotalFeedback()) * 100) + \"%\"\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"FeedbackUI-section\">\n        <h2>Please leave feedback</h2>\n        <FeedbackControls onAddVote={this.addVote} />\n        <h2>Statistics</h2>\n        <Statistics\n          statistic={this.state}\n          totalVotes={this.countTotalFeedback()}\n          positiveCount={this.countPositiveFeedbackPercentage()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// ===== IDEA FOR HW 2 ==== //\n// countTotalVotes = () => {\n//  return Object.values(state).reduce().....\n// }\n//\n//countPercentage = (totalVotes, posVotes) => {\n//  return ?? totalVotes / posVotes ??\n// }\n//\n\n// render() {\n// const total = this.countTotalVotes()\n// <h1> { total } </h1>;\n// const posR = this.countPercentage(total, this.state.good)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}